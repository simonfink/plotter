package ch.ntb.inf.libusbJava.test;

import ch.ntb.inf.libusbJava.Context;
import ch.ntb.inf.libusbJava.Device;
import ch.ntb.inf.libusbJava.DeviceDescriptor;
import ch.ntb.inf.libusbJava.exceptions.LibusbException;


public class UseTestLibusbJava {

	private static final int MAX_PORT_DEPTH = 7;
	
	public static void main(String[] args){
		Context useCtx = null;
		Device usbDev = null;
		DeviceDescriptor devDesc = null;
		System.out.println("UseTests started:");
		try {
			useCtx = new Context();
		} catch (LibusbException e) {
			System.out.println("Init failed:");
			e.printStackTrace();
		}
		System.out.println("search Device:");
		try {
			usbDev = Device.search(useCtx, 0x8235, 0x100);
			devDesc = usbDev.getDeviceDescriptor();
			System.out.println("Device found with vid 0x" + Integer.toHexString(devDesc.getVendorId()) 
					+ ", pid 0x" + Integer.toHexString(devDesc.getProductId()));
			System.out.println("Bus: " + usbDev.getBusNumber() + " Port: " + usbDev.getPortNumber());
			System.out.print("Port Numbers to root: ");
			
		} catch (LibusbException e) {
			System.out.println("Error occured: search");
			e.printStackTrace();
		}
		if(usbDev == null) return;
		int nofPorts = 0;
		int[] portNumbers = new int [MAX_PORT_DEPTH];
		try{
			nofPorts = usbDev.getPortNumbers(portNumbers);
			for(int i = 0; i < nofPorts; i++){
				System.out.print(portNumbers[i] + " ");
			}
			System.out.println();
			System.out.println("Device Address: 0x" + Integer.toHexString(usbDev.getDeviceAddress()));
			System.out.println("Device Speed: " + usbDev.getDeviceSpeed().toString());
			System.out.println("--Parent Device--");
			Device parentDev = usbDev.getParent();
			if(parentDev != null){
				System.out.println("Parent Device: pid: 0x" + Integer.toHexString(parentDev.getDeviceDescriptor().getProductId()) 
						+ ", vid: 0x" + Integer.toHexString(parentDev.getDeviceDescriptor().getVendorId()));
				System.out.println("Bus: " + parentDev.getBusNumber() + " Port: " + parentDev.getPortNumber());
				System.out.print("Port Numbers to root: ");
				nofPorts = parentDev.getPortNumbers(portNumbers);
				for(int i = 0; i < nofPorts; i++){
					System.out.print(portNumbers[i] + " ");
				}
				System.out.println();
				System.out.println("-----------------");
			}
			else{
				System.out.println("No Parent Device.");
			}
			//ConfigDescriptor
			System.out.println("Config Descriptors:\nnofConfigs: " + devDesc.getNofConfigurations());
			devDesc.getConfigDescriptors();
			System.out.println("Device found with vid 0x" + Integer.toHexString(devDesc.getVendorId()) 
					+ ", pid 0x" + Integer.toHexString(devDesc.getProductId()));
			System.out.println("Active Descriptor: ");
			devDesc.getActiveConfigDescriptor();
			
		}
		catch(LibusbException e){
			System.out.println("Error occured: get device properties");
			e.printStackTrace();
		}
		try {
			usbDev.open();
		} catch (LibusbException e) {
			System.out.println("Error occured: open");
			e.printStackTrace();
		}
		System.out.println("Device successful opened!");
		
		usbDev.close();
		System.out.println("Device closed.");
	}
	
	static{
		System.loadLibrary("LibusbJava");
	}
}
