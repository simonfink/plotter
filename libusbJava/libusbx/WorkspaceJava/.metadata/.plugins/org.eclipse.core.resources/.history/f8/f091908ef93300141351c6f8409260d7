package ch.ntb.inf.libusbJava;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

import ch.ntb.inf.libusbJava.exceptions.DeviceListNotValidException;
import ch.ntb.inf.libusbJava.exceptions.WrongContextException;
import ch.ntb.inf.libusbJava.exceptions.LibusbException;
import ch.ntb.inf.libusbJava.exceptions.NoDeviceException;
import ch.ntb.inf.libusbJava.test.LibusbJavaListTest;

public class Device {

	private static final boolean dbg = true;
	private static final boolean testing = false;
	
	private Context ctx;
	
	private DeviceDescriptor devDesc;
	private static int nofDevices = 0;
	private static List<Device> devList;
	private static boolean deviceListValid = false; //TODO set deviceListValid = false at freeDeviceList or think of other possibilities
	
	private ByteBuffer nativeDevice;
	private ByteBuffer nativeHandle;
	
//	private Device parent;
	static{
		devList = new ArrayList<Device>();
	}
	
	public Device(Context ctx, ByteBuffer nativeDevice) { // TODO protected or not???
		this.ctx = ctx;
		this.nativeDevice = nativeDevice;
		nofDevices++;
	}
	
	public static Device search(Context ctx, int vid, int pid) throws LibusbException{
		getList(ctx);
		for(int i = 0; i < devList.size(); i++){
//			System.out.println("Dev" + i + ":");
//			System.out.println("vid: " + devList.get(i).getDeviceDescriptor().getVendorId());
			if(vid == devList.get(i).getDeviceDescriptor().getVendorId()){
//				System.out.println("pid: " + devList.get(i).getDeviceDescriptor().getProductId());
				if(pid == devList.get(i).getDeviceDescriptor().getProductId()){
					return devList.get(i);
				}
			}
		}
		throw new NoDeviceException();
	}
	
	public static Device get(Context ctx, int vid, int pid) {
		// TODO
		// protect this devices
		return null;
	}
	
//	public static List<Device> getList(Context ctx) throws LibusbException {
//		// protect all devices
//		List<ByteBuffer> nativeList = Libusb.getDeviceList(ctx.getNativePointer());
//		for(int i = 0; i < nativeList.size(); i++){
//			devList.add(i, new Device(ctx, nativeList.get(i)));
//		}
//		deviceListValid = true;
//		return devList;
//	}
	
	private static void getList(Context ctx) throws LibusbException {
		List<ByteBuffer> nativeList;
		if(testing){
			nativeList = LibusbJavaListTest.getDeviceList(ctx.getNativePointer());
		}
		else{
			nativeList = Libusb.getDeviceList(ctx.getNativePointer());
		}
		if(devList.size() > 0){ 	//refresh
			boolean devInList = false;
			
			//check if device already in the List or if one got cleared out
			for(int i = 0; i < devList.size(); i++){
				devInList = false;
				for(int j = 0; j < nativeList.size() && !devInList; j++){
					if(devList.get(i).getNativeDevice() == nativeList.get(j)){
						//device found
						devInList = true;
						if(i != j){
							//list changed
							devList.add(j, devList.get(i));
							devList.remove(i);
							devList.add(i, new Device(ctx, nativeList.get(i)));
						}
					}
				}
				if(!devInList){
					if(devList.size() > nativeList.size()){
						//device not found in new nativeList -> remove
						devList.remove(i);
						i--; // list will get shorter by one element, make sure, that new i element will be checked!
					}
					else{
						devList.add(i, new Device(ctx, nativeList.get(i)));
					}
				}
			}
		}
		else{
			for(int i = 0; i < nativeList.size(); i++){
				devList.add(new Device(ctx, nativeList.get(i)));
			}
		}
		deviceListValid = true;
	}
	
	private static void freeList(Context ctx, boolean unrefDev) throws LibusbException {
		if(deviceListValid){
			if(ctx.getNativePointer() == devList.get(0).getContext().getNativePointer()){
				Libusb.freeDeviceList(unrefDev);
				deviceListValid = false;
				if(dbg) System.out.println("Device List freed.");				
			}
			else{
				throw new WrongContextException();
			}
		}
		else{
			throw new DeviceListNotValidException();
		}
	}
		
	//gives bus number where device is attached
	public int getBusNumber(){
		return Libusb.getBusNumber(nativeDevice);
	}
	
	//gives port number where device is attached
	public int getPortNumber(){
		return Libusb.getPortNumber(nativeDevice);
	}
	
	//gives all port numbers from device to root
	public int getPortNumbers(int[] portNumbers) throws LibusbException {
		//TODO probably return port numbers in other form? build tree, String?
		return Libusb.getPortNumbers(ctx.getNativePointer(), nativeDevice, portNumbers);		
	}
	
	public Device getParent() throws LibusbException{
		// only valid as long as device_list is not freed in native code with libusb_free_device_list
		if(!deviceListValid){
			throw new DeviceListNotValidException();
			//or should issue a getDeviceList, but then probably clean up directly afterwards!?
		}
		ByteBuffer nativeParent = Libusb.getParent(nativeDevice);
		if(nativeParent == null){
			return null;			//no parent available
		}
		for(int i = 0; i < devList.size(); i++){
			if(nativeParent == devList.get(i).nativeDevice){
				return devList.get(i);
			}
		}
		return null;
	}
	
	public int getDeviceAddress(){
		return 0; //TODO
	}
	
	public int getDeviceSpeed(){
		return 0; //TODO
		// LIBUSB_SPEED_UNKNOWN out of libusb_speed means that the OS doesn't know or doesn't support returning the negotiated speed
	}
	
//	public void refDevice(){
//		//TODO increment the reference count of a device
//	}
//	
//	public void unrefDevice(){
//		//TODO decrement the reference count of a device, if the decrement operation causes the reference count to reach zero, the device shall be destroyed.
//	}
	
	public void open() throws LibusbException{
		nativeHandle = Libusb.open(nativeDevice);
		if(nativeHandle != null){ 	//error occured during open, so we probably need Device List again
			freeList(ctx, true);	//otherwise: clean up Device List
		}
	}
	
	public void close(){
		Libusb.close(nativeHandle);
		nativeHandle = null; 		//destroy handle in Java too
	}
	
//	//TODO getDevice
//	public Device getDevice(){
//		//TODO
//		return null;
//	}
	
	public DeviceDescriptor getDeviceDescriptor() throws LibusbException{
		devDesc = Libusb.getDeviceDescriptor(nativeDevice);
		return devDesc;
	}
	
	public void reset(){
		//TODO reset Device via device_handle
		//TODO throws LIBUSB_ERROR_NOT_FOUND, LIBUSB_ERROR on error
	}
	
	public int controlTransfer(){
		//TODO throw LIBUSB_ERROR_TIMEOUT, LIBUSB_ERROR_PIPE, LIBUSB_ERROR_NO_DEVICE, another LIBUSB_ERROR
		return 0;
	}
	
	public void bulkTransfer(){
		//TODO throw LIBUSB_ERROR_TIMEOUT, LIBUSB_ERROR_PIPE, LIBUSB_ERROR_OVERFLOW, LIBUSB_ERROR_NO_DEVICE, another LIBUSB_ERROR
	}
	
	public void interruptTransfer(){
		//TODO throw LIBUSB_ERROR_TIMEOUT, LIBUSB_ERROR_PIPE, LIBUSB_ERROR_OVERFLOW, LIBUSB_ERROR_NO_DEVICE, another LIBUSB_ERROR
	}
	
	protected void finalize(){
		Libusb.unrefDevice(nativeDevice);
		nofDevices--;
	}
	
	public static int getNofDevices(){
		return nofDevices;
	}
	
	public Context getContext(){
		return ctx;
	}
	
	public ByteBuffer getNativeDevice(){
		return nativeDevice;
	}
}
