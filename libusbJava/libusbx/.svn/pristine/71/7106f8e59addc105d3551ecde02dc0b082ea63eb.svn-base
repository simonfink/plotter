package ch.ntb.inf.libusb;

import java.lang.reflect.Field;
import java.nio.ByteBuffer;

import ch.ntb.inf.libusb.Libusb;
import ch.ntb.inf.libusb.exceptions.LibusbException;

public class Context {

	private ByteBuffer context;
	private static int nofContext = 0;
	
	static{
		System.setProperty( "java.library.path", "C:/Windows/System32/" );
		 
		Field fieldSysPath;

		try {
			fieldSysPath = ClassLoader.class.getDeclaredField( "sys_paths" );
			fieldSysPath.setAccessible( true );
			fieldSysPath.set( null, null );
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		
		System.loadLibrary("LibusbJava-1_1");
	}
	
	/**
	 * create a new LibusbJava context, this is the entry point for the use of LibusbJava (initializes libusb)
	 * @throws LibusbException
	 */
	public Context() throws LibusbException {
		context = Libusb.init();
		nofContext++;
	}
	
	ByteBuffer getNativePointer(){
		return context;
	}
	
	/**
	 * exit libusb
	 */
	public void finalize() throws Throwable{
		try{
			nofContext--;
			if(nofContext <= 0){
				Libusb.exit(context);
			}
		}
		finally{
			super.finalize();
		}
	}
}
