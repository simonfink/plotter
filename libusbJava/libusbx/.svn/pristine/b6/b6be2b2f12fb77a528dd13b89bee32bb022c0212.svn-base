#include <iostream>
#include <jni.h>
#include <libusb.h>
#include "ch_ntb_inf_libusbJava_Libusb.h"

#define ERROR_JAVA_REFERENCES_NOT_LOADED	-100
#define ERROR_JAVA_WRONG_ENVIRONMENT		-101
#define ERROR_JAVA_ILEGAL_DEVICE_HANDLE		-102

//maximum number of port depth. As per the USB 3.0 specs, this is the current maximum limit
#define MAX_PORT_DEPTH 7

#define DEBUGON

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved){
//	JNIEnv * env = NULL;
//	jint result = -1;
//
//	if (vm->GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_4) != JNI_OK) {
//		return -1;
//	}
	//TODO
	return JNI_VERSION_1_4;
}


static __inline void JNICALL ThrowLibusbException(JNIEnv *env, jint code){
	jmethodID constructor = NULL;
	jthrowable libusbException = NULL;

	jclass clazz = env->FindClass("ch/ntb/inf/libusbJava/exceptions/LibusbException");
	if(clazz == NULL){
		goto noClass;
	}

	constructor = env->GetMethodID(clazz, "<init>", "(I)V");
	if(constructor == NULL){
		goto noConstructor;
	}

	libusbException = (jthrowable)env->NewObject(clazz, constructor, code);
	if(libusbException == NULL){
		goto noObject;
	}

	if(env->Throw(libusbException) != 0){
		goto throwFailed;
	}

	env->DeleteLocalRef(libusbException);
	env->DeleteLocalRef(clazz);

	return;

	/* Error Handling. All errors covered here are caused by JNI callbacks and have
	 * therefore already thrown appropriate exceptions in the Java environment.
	 * Therefore we only have to cleanup what we constructed. */

throwFailed:
	env->DeleteLocalRef(libusbException);

noObject:
noConstructor:
	env->DeleteLocalRef(clazz);

noClass:

	return;
}


/*
 * Class:     ch_ntb_inf_libusbJava_LibusbJava
 * Method:    setDebug
 * Signature: (Ljava/nio/ByteBuffer;I)V
 */
JNIEXPORT void JNICALL Java_ch_ntb_inf_libusbJava_LibusbJava_setDebug
  (JNIEnv *env, jclass obj, jobject ctx, jint level){
	libusb_context* context = nullptr;

	if(ctx){
		context = static_cast<libusb_context*>(env->GetDirectBufferAddress(ctx));
	}
	libusb_set_debug(context, level);
}

/*
 * Class:     ch_ntb_inf_libusbJava_LibusbJava
 * Method:    init
 * Signature: ()Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_ch_ntb_inf_libusbJava_Libusb_init(JNIEnv *env, jclass obj){
	int res;
	libusb_context* context = nullptr;

	res = libusb_init(&context);

	#ifdef DEBUGON
		std::cout << "res = " << res << std::endl;
		std::cout << "env = " << env << std::endl;
		std::cout << "context = " << context << std::endl;
		std::cout << "&context = " << &context << std::endl;
	#endif

	if (res != 0)
	{
		ThrowLibusbException(env, res);
		return 0;
	}
	else
	{
		return env->NewDirectByteBuffer(context,0);
	}
}

/*
 * Class:     ch_ntb_inf_libusbJava_Libusb
 * Method:    exit
 * Signature: (Ljava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_ch_ntb_inf_libusbJava_Libusb_exit(JNIEnv *env, jclass obj, jobject ctx){
	libusb_context* context = nullptr;

	if(ctx){
		context = static_cast<libusb_context*>(env->GetDirectBufferAddress(ctx));
	}

	#ifdef DEBUGON
		std::cout << "env = " << env << std::endl;
		std::cout << "context = " << context << std::endl;
		std::cout << "&context = " << &context << std::endl;
	#endif

	libusb_exit(context);
}

/*
 * Class:     ch_ntb_inf_libusbJava_Libusb
 * Method:    getDeviceList
 * Signature: (Ljava/nio/ByteBuffer;)Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_ch_ntb_inf_libusbJava_Libusb_getDeviceList(JNIEnv *env, jclass obj, jobject ctx){
	libusb_context* context = nullptr;
	libusb_device** devList;
	ssize_t cnt;

	jmethodID constructorArrList = nullptr;
	jmethodID addArrList = nullptr;
	jclass clazzArrList = nullptr;
	jobject nativeDevList = nullptr;
	jobject changed = nullptr;
	jobject nativeDevPointer = nullptr;

	if(ctx){
		context = static_cast<libusb_context*>(env->GetDirectBufferAddress(ctx));
	}

#ifdef DEBUGON
	std::cout << "env = " << env << std::endl;
	std::cout << "context = " << context << std::endl;
	std::cout << "&context = " << &context << std::endl;
#endif

	cnt = libusb_get_device_list(context, &devList);
	if(cnt < 0){
		ThrowLibusbException(env, cnt);
		libusb_free_device_list(devList, 1);
		return nullptr;
	}
	else if (cnt == 0){
		libusb_free_device_list(devList, 1);
		return nullptr;
	}

	clazzArrList = env->FindClass("java/util/ArrayList");
	if(clazzArrList == nullptr){
		goto no_class;
	}
	constructorArrList = env->GetMethodID(clazzArrList, "<init>", "(I)V");
	if(constructorArrList == nullptr){
		goto no_constructor;
	}
	nativeDevList = (jobject)env->NewObject(clazzArrList, constructorArrList, cnt);
	if(nativeDevList == nullptr){
		goto no_object;
	}
	addArrList = env->GetMethodID(clazzArrList, "add", "(Ljava/lang/Object;)Z");
	if(addArrList == nullptr){
		goto method_not_found;
	}

	for(int i = 0; i < cnt; i++){
		nativeDevPointer = env->NewDirectByteBuffer(devList[i],0);
#ifdef DEBUGON
		//TODO remove
//		std::cout << "devList = " << devList << std::endl;
//		std::cout << "devList[i] = " << devList[i] << std::endl;
//		std::cout << "native ptr = " << nativeDevPointer << std::endl;
#endif
		changed = env->CallObjectMethod(nativeDevList, addArrList, nativeDevPointer);
	}

	return nativeDevList;

	method_not_found:

	no_object:

	no_constructor:
	env->DeleteLocalRef(clazzArrList);

	no_class:
	return nullptr;
}

/*
 * Class:     ch_ntb_inf_libusbJava_Libusb
 * Method:    getBusNumber
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_ch_ntb_inf_libusbJava_Libusb_getBusNumber(JNIEnv *env, jclass obj, jobject nativeDevice){
	libusb_device* dev = nullptr;

	if(nativeDevice){
		dev = static_cast<libusb_device*>(env->GetDirectBufferAddress(nativeDevice));
		return static_cast<jint>(libusb_get_bus_number(dev));
	}
	else{
		ThrowLibusbException(env, LIBUSB_ERROR_INVALID_PARAM);
		return 0;
	}
}

/*
 * Class:     ch_ntb_inf_libusbJava_Libusb
 * Method:    getPortNumber
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_ch_ntb_inf_libusbJava_Libusb_getPortNumber(JNIEnv *env, jclass obj, jobject nativeDevice){
	libusb_device* dev = nullptr;

	if(nativeDevice){
		dev = static_cast<libusb_device*>(env->GetDirectBufferAddress(nativeDevice));
		return static_cast<jint>(libusb_get_port_number(dev));
	}
	else{
		ThrowLibusbException(env, LIBUSB_ERROR_INVALID_PARAM);
		return 0;
	}
}

/*
 * Class:     ch_ntb_inf_libusbJava_Libusb
 * Method:    getPortNumbers
 * Signature: (Ljava/nio/ByteBuffer;[I)I
 */
JNIEXPORT jint JNICALL Java_ch_ntb_inf_libusbJava_Libusb_getPortNumbers(JNIEnv *env, jclass obj, jobject ctx, jobject nativeDevice, jintArray portNumbers){
	libusb_context *context = nullptr;
	libusb_device *dev = nullptr;
	uint8_t *nativePortNumbers = new uint8_t[MAX_PORT_DEPTH];
	jint* buf;

	dev = static_cast<libusb_device*>(env->GetDirectBufferAddress(nativeDevice));
	if(ctx){
		context = static_cast<libusb_context*>(env->GetDirectBufferAddress(ctx));
	}
	int nofNumbers = libusb_get_port_numbers(dev, nativePortNumbers, MAX_PORT_DEPTH);
#ifdef DEBUGON
	std::cout << "nofNumbers: " << nofNumbers << std::endl;
	for(int i = nofNumbers; i < nofNumbers; i++){
		std::cout << "nativePortNumbers: " << nativePortNumbers[i] << std::endl;
	}
#endif
	portNumbers = env->NewIntArray(nofNumbers);
	buf = new jint[nofNumbers];

	for(int j = 0; j < nofNumbers; j++){
		buf[j] = static_cast<jint>(*nativePortNumbers);
	}
	env->SetIntArrayRegion(portNumbers, 0, nofNumbers, buf);


	return nofNumbers;
}


